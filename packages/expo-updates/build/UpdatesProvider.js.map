{"version":3,"file":"UpdatesProvider.js","sourceRoot":"","sources":["../src/UpdatesProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport type { UpdateEvent, UpdatesInfo } from './Updates.types';\nimport { useUpdateEvents } from './UpdatesHooks';\n\n/////// Types ////////\n\n/**\n * Context that includes getter and setter for updates info\n */\ntype UpdatesContextType = {\n  updatesInfo: UpdatesInfo;\n  setUpdatesInfo: (updates: UpdatesInfo) => void;\n};\n\n/////// Constants ////////\n\n// The currently running update, constructed from the manifest constant\nconst currentlyRunning = Updates.manifest;\n// True if the app is running from the embedded bundle\nconst embedded = Updates.isEmbeddedLaunch;\n\n/////// Internal functions ////////\n\n// Promise wrapper for setTimeout()\nconst delay = (timeout: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n};\n\n// Constructs the UpdatesInfo from an event\nconst updatesFromEvent = (event: UpdateEvent): UpdatesInfo => {\n  if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      embedded,\n    };\n  } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      updateAvailable: event.manifest,\n      embedded,\n    };\n  } else {\n    // event type === ERROR\n    return {\n      currentlyRunning,\n      error: event.message || '',\n      embedded,\n    };\n  }\n};\n\n// Implementation of checkForUpdate\nconst checkAndRefreshUpdatesStructure: (\n  setUpdates: (_: UpdatesInfo) => void\n) => Promise<void> = async (setUpdates) => {\n  let result: UpdatesInfo;\n  try {\n    const checkResult = await Updates.checkForUpdateAsync();\n    if (checkResult.isAvailable) {\n      result = {\n        currentlyRunning,\n        updateAvailable: checkResult.manifest,\n        embedded,\n      };\n    } else {\n      result = {\n        currentlyRunning,\n        embedded,\n      };\n    }\n  } catch (error: any) {\n    result = {\n      currentlyRunning,\n      error: error?.message || 'Error occurred',\n      embedded,\n    };\n  }\n  setUpdates(result);\n};\n\n// The context provided to the app\nconst UpdatesContext: React.Context<UpdatesContextType> = createContext({\n  updatesInfo: {\n    currentlyRunning,\n    embedded,\n  },\n  setUpdatesInfo: (_) => {},\n});\n\n///////////// Exported functions /////////////\n\n/**\n * Calls [`checkForUpdateAsync`](#checkforupdateasync) and uses the passed in setter\n * to refresh the [`UpdatesInfo`](#updatesinfo). Provided to application code from\n * the [`useUpdates`](#useupdates) hook.\n */\nexport let checkForUpdate = () => {\n  // This stub is replaced with the real implementation in the hook\n};\n\n/**\n * Downloads and runs an update, if one is available. Provided to application code\n * from the [`useUpdates`](#useupdates) hook.\n */\nexport const runUpdate: () => Promise<void> = async () => {\n  await Updates.fetchUpdateAsync();\n  await delay(2000);\n  await Updates.reloadAsync();\n};\n\n/**\n * Provides the Updates React context. Includes an [`UpdateEvent`](#updateevent) listener\n * that will set the context automatically, if automatic updates are enabled and a new\n * update is available. This is required if application code uses the [`useUpdates`](#useupdates) hook.\n * @param props Context will be provided to `props.children`\n * @returns the provider.\n */\nconst UpdatesProvider = (props: { children: any }) => {\n  const [updatesInfo, setUpdatesInfo] = useState({\n    currentlyRunning,\n    embedded,\n  });\n  // Set up listener for events from automatic update requests\n  // that happen on startup, and use events to refresh the updates info\n  // context\n  useUpdateEvents((event) => {\n    setUpdatesInfo(updatesFromEvent(event));\n  });\n  return (\n    <UpdatesContext.Provider value={{ updatesInfo, setUpdatesInfo }}>\n      {props.children}\n    </UpdatesContext.Provider>\n  );\n};\n\n/**\n * Hook that obtains the Updates info structure and functions. Requires that application code be inside an [`UpdatesProvider`](#updatesprovider).\n * @returns the [`UpdatesInfo`](#updatesinfo) structure, the [`checkForUpdate`](#checkforupdate) function, and the [`runUpdate`](#runupdate) function.\n */\nconst useUpdates = (): {\n  updatesInfo: UpdatesInfo;\n  checkForUpdate: typeof checkForUpdate;\n  runUpdate: typeof runUpdate;\n} => {\n  // Get updates info value and setter from provider\n  const { updatesInfo, setUpdatesInfo } = useContext(UpdatesContext);\n\n  // Create the implementation of checkForUpdate()\n  checkForUpdate = () => {\n    checkAndRefreshUpdatesStructure(setUpdatesInfo);\n  };\n  // Return the updates info and the user facing functions\n  return { updatesInfo, checkForUpdate, runUpdate };\n};\n\nexport { UpdatesProvider, useUpdates };\n"]}